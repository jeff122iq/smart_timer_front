{"ast":null,"code":"var _class, _descriptor, _descriptor2, _temp;\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\nimport { observable, makeObservable, action } from \"mobx\";\nlet cardStore = (_class = (_temp = class cardStore {\n  constructor() {\n    _initializerDefineProperty(this, \"card\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"createCard\", _descriptor2, this);\n\n    makeObservable(this);\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"card\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {\n      title: \"\",\n      text: \"\"\n    };\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"createCard\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return info => {\n      this.card.title = info.title;\n      this.card.text = info.text;\n    };\n  }\n})), _class);\nexport const CardStore = new cardStore();","map":{"version":3,"sources":["/home/cubex/CodeProjects/smart_timer_front/store/cardStore.ts"],"names":["observable","makeObservable","action","cardStore","constructor","title","text","info","card","CardStore"],"mappings":";;;;;;;;AACA,SAASA,UAAT,EAAqBC,cAArB,EAAqCC,MAArC,QAAmD,MAAnD;IAEMC,S,sBAAN,MAAMA,SAAN,CAAgB;AACdC,EAAAA,WAAW,GAAG;AAAA;;AAAA;;AACZH,IAAAA,cAAc,CAAC,IAAD,CAAd;AACD;;AAHa,C,8EAKbD,U;;;;;WAAyB;AACxBK,MAAAA,KAAK,EAAE,EADiB;AAExBC,MAAAA,IAAI,EAAE;AAFkB,K;;8EAKzBJ,M;;;;;WAAqBK,IAAD,IAAU;AAC7B,WAAKC,IAAL,CAAUH,KAAV,GAAkBE,IAAI,CAACF,KAAvB;AACA,WAAKG,IAAL,CAAUF,IAAV,GAAiBC,IAAI,CAACD,IAAtB;AACD,K;;;AAGH,OAAO,MAAMG,SAAS,GAAG,IAAIN,SAAJ,EAAlB","sourcesContent":["import { cards } from \"../interface/cards\";\nimport { observable, makeObservable, action } from \"mobx\";\n\nclass cardStore {\n  constructor() {\n    makeObservable(this);\n  }\n\n  @observable card: cards = {\n    title: \"\",\n    text: \"\",\n  };\n\n  @action createCard = (info) => {\n    this.card.title = info.title;\n    this.card.text = info.text;\n  };\n}\n\nexport const CardStore = new cardStore();\n"]},"metadata":{},"sourceType":"module"}